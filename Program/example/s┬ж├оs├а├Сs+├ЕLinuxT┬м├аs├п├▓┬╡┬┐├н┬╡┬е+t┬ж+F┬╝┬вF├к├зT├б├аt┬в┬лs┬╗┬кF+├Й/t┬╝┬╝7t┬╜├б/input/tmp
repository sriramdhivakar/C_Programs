
key.ko:     file format elf32-littlearm


Disassembly of section .text:

00000000 <input_close>:
}

static void input_close(struct input_dev *dev)
{
    return;
}
   0:	e12fff1e 	bx	lr

00000004 <key_open>:


int key_open(struct inode *inode, struct file *filp)
{
	return 0;
}
   4:	e3a00000 	mov	r0, #0
   8:	e12fff1e 	bx	lr

0000000c <key_release>:
     return 0; 
}
int key_release(struct inode *inode, struct file *filp)
{
    return 0;
}
   c:	e3a00000 	mov	r0, #0
  10:	e12fff1e 	bx	lr

00000014 <key_read>:

ssize_t key_read(struct file *filp,char __user *buf,size_t count,loff_t *ppos)
{
    return count;
}
  14:	e1a00002 	mov	r0, r2
  18:	e12fff1e 	bx	lr

0000001c <input_open>:
    mod_timer(&timer,jiffies + (HZ * 2));
}


static int input_open(struct input_dev *dev)
{
  1c:	e92d4008 	push	{r3, lr}
    printk("open input\n");
  20:	e59f0008 	ldr	r0, [pc, #8]	; 30 <input_open+0x14>
  24:	ebfffffe 	bl	0 <printk>
    return 0;
}
  28:	e3a00000 	mov	r0, #0
  2c:	e8bd8008 	pop	{r3, pc}
  30:	00000000 	.word	0x00000000

00000034 <key_ioctl>:

long key_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
{
    int data;

    switch (cmd)
  34:	e3510001 	cmp	r1, #1
{
	return 0;
}

long key_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
{
  38:	e92d4008 	push	{r3, lr}
    int data;

    switch (cmd)
  3c:	1a000017 	bne	a0 <key_ioctl+0x6c>
    {
         case IOCTL_READKEY:
              data = readl(IMM32 + GPNDAT_OFFSET);
  40:	e59f2060 	ldr	r2, [pc, #96]	; a8 <key_ioctl+0x74>
  44:	e3a0c000 	mov	ip, #0
  48:	e5923000 	ldr	r3, [r2]
  4c:	e5933834 	ldr	r3, [r3, #2100]	; 0x834
  50:	ee07cfba 	mcr	15, 0, ip, cr7, cr10, {5}
 
              if(data & 0x01)
  54:	e2133001 	ands	r3, r3, #1
  58:	0a000005 	beq	74 <key_ioctl+0x40>
void input_event(struct input_dev *dev, unsigned int type, unsigned int code, int value);
void input_inject_event(struct input_handle *handle, unsigned int type, unsigned int code, int value);

static inline void input_report_key(struct input_dev *dev, unsigned int code, int value)
{
	input_event(dev, EV_KEY, code, !!value);
  5c:	e5920004 	ldr	r0, [r2, #4]
  60:	e1a0300c 	mov	r3, ip
  64:	e3a02002 	mov	r2, #2
  68:	ebfffffe 	bl	0 <input_event>
              {
                   input_report_key(dev,KEY_1, 0);
                   printk("01\n");
  6c:	e59f0038 	ldr	r0, [pc, #56]	; ac <key_ioctl+0x78>
  70:	ea000003 	b	84 <key_ioctl+0x50>
  74:	e5920004 	ldr	r0, [r2, #4]
  78:	e3a02002 	mov	r2, #2
  7c:	ebfffffe 	bl	0 <input_event>

              }
              else
              {
                  input_report_key(dev,KEY_1, 0);
                  printk("00\n");
  80:	e59f0028 	ldr	r0, [pc, #40]	; b0 <key_ioctl+0x7c>
  84:	ebfffffe 	bl	0 <printk>
	input_event(dev, EV_SW, code, !!value);
}

static inline void input_sync(struct input_dev *dev)
{
	input_event(dev, EV_SYN, SYN_REPORT, 0);
  88:	e59f3018 	ldr	r3, [pc, #24]	; a8 <key_ioctl+0x74>
  8c:	e3a01000 	mov	r1, #0
  90:	e1a02001 	mov	r2, r1
  94:	e5930004 	ldr	r0, [r3, #4]
  98:	e1a03001 	mov	r3, r1
  9c:	ebfffffe 	bl	0 <input_event>
               break;
         default:
               break;
     }
     return 0; 
}
  a0:	e3a00000 	mov	r0, #0
  a4:	e8bd8008 	pop	{r3, pc}
  a8:	00000000 	.word	0x00000000
  ac:	0000000c 	.word	0x0000000c
  b0:	00000010 	.word	0x00000010

000000b4 <timer_funtion>:
		 
struct input_dev *dev;		 


void timer_funtion(unsigned long para)
{
  b4:	e92d4010 	push	{r4, lr}
void input_event(struct input_dev *dev, unsigned int type, unsigned int code, int value);
void input_inject_event(struct input_handle *handle, unsigned int type, unsigned int code, int value);

static inline void input_report_key(struct input_dev *dev, unsigned int code, int value)
{
	input_event(dev, EV_KEY, code, !!value);
  b8:	e3a01001 	mov	r1, #1
  bc:	e59f4038 	ldr	r4, [pc, #56]	; fc <timer_funtion+0x48>
  c0:	e3a02002 	mov	r2, #2
  c4:	e3a03000 	mov	r3, #0
  c8:	e5940004 	ldr	r0, [r4, #4]
  cc:	ebfffffe 	bl	0 <input_event>
	input_event(dev, EV_SW, code, !!value);
}

static inline void input_sync(struct input_dev *dev)
{
	input_event(dev, EV_SYN, SYN_REPORT, 0);
  d0:	e3a01000 	mov	r1, #0
  d4:	e5940004 	ldr	r0, [r4, #4]
  d8:	e1a02001 	mov	r2, r1
  dc:	e1a03001 	mov	r3, r1
  e0:	ebfffffe 	bl	0 <input_event>
    input_report_key(dev,KEY_1, 0);
    input_sync(dev);
 
    mod_timer(&timer,jiffies + (HZ * 2));
  e4:	e59f3014 	ldr	r3, [pc, #20]	; 100 <timer_funtion+0x4c>
  e8:	e2840008 	add	r0, r4, #8
  ec:	e5931000 	ldr	r1, [r3]
  f0:	e28110c8 	add	r1, r1, #200	; 0xc8
}
  f4:	e8bd4010 	pop	{r4, lr}
void timer_funtion(unsigned long para)
{
    input_report_key(dev,KEY_1, 0);
    input_sync(dev);
 
    mod_timer(&timer,jiffies + (HZ * 2));
  f8:	eafffffe 	b	0 <mod_timer>
	...

00000104 <key_write>:


ssize_t key_write(struct file *filp,const char __user *buf,size_t count,loff_t *ppos)
{
    return count;
}
 104:	e1a00002 	mov	r0, r2
 108:	e12fff1e 	bx	lr

Disassembly of section .init.text:

00000000 <init_module>:
 .fops = &key_ops,
};


static int __init dev_init(void)
{
   0:	e92d4010 	push	{r4, lr}
    int ret;
    struct input_dev *input_dev; 
    int err;


    IMM32 = ioremap(ADDRESS,1024);
   4:	e3a01b01 	mov	r1, #1024	; 0x400
   8:	e3a02000 	mov	r2, #0
   c:	e59f0108 	ldr	r0, [pc, #264]	; 11c <init_module+0x11c>
  10:	ebfffffe 	bl	0 <__arm_ioremap>
  14:	e59f4104 	ldr	r4, [pc, #260]	; 120 <init_module+0x120>
  18:	e5840000 	str	r0, [r4]

//     ret = misc_register(&misc);


    input_dev = input_allocate_device();   
  1c:	ebfffffe 	bl	0 <input_allocate_device>
    if (!input_dev) {   
  20:	e3500000 	cmp	r0, #0
  24:	1a000002 	bne	34 <init_module+0x34>
        printk(KERN_ERR "Unable to allocate the input device !!/n");   
  28:	e59f00f4 	ldr	r0, [pc, #244]	; 124 <init_module+0x124>
  2c:	ebfffffe 	bl	0 <printk>
        return -ENOMEM;   
  30:	ea000037 	b	114 <init_module+0x114>
    }   

    dev = input_dev;   
  34:	e5840004 	str	r0, [r4, #4]

static inline unsigned long arch_local_irq_save(void)
{
	unsigned long flags;

	asm volatile(
  38:	e10f3000 	mrs	r3, CPSR
  3c:	f10c0080 	cpsid	i
	unsigned long mask = 1UL << (bit & 31);

	p += bit >> 5;

	raw_local_irq_save(flags);
	*p |= mask;
  40:	e5902018 	ldr	r2, [r0, #24]
  44:	e3822002 	orr	r2, r2, #2
  48:	e5802018 	str	r2, [r0, #24]
/*
 * restore saved IRQ & FIQ state
 */
static inline void arch_local_irq_restore(unsigned long flags)
{
	asm volatile(
  4c:	e121f003 	msr	CPSR_c, r3

//    dev->evbit[0] = BIT(EV_SYN) | BIT(EV_KEY);   
//    dev->keybit[BITS_TO_LONGS(BTN_TOUCH)] = BIT(BTN_TOUCH);   

    set_bit(EV_KEY, dev->evbit);  
    set_bit(KEY_ESC,dev->keybit);
  50:	e5943004 	ldr	r3, [r4, #4]

static inline unsigned long arch_local_irq_save(void)
{
	unsigned long flags;

	asm volatile(
  54:	e10f2000 	mrs	r2, CPSR
  58:	f10c0080 	cpsid	i
  5c:	e593101c 	ldr	r1, [r3, #28]
  60:	e3811002 	orr	r1, r1, #2
  64:	e583101c 	str	r1, [r3, #28]
/*
 * restore saved IRQ & FIQ state
 */
static inline void arch_local_irq_restore(unsigned long flags)
{
	asm volatile(
  68:	e121f002 	msr	CPSR_c, r2
    set_bit(KEY_1, dev->keybit); 
  6c:	e5943004 	ldr	r3, [r4, #4]

static inline unsigned long arch_local_irq_save(void)
{
	unsigned long flags;

	asm volatile(
  70:	e10f2000 	mrs	r2, CPSR
  74:	f10c0080 	cpsid	i
  78:	e593101c 	ldr	r1, [r3, #28]
  7c:	e3811004 	orr	r1, r1, #4
  80:	e583101c 	str	r1, [r3, #28]
/*
 * restore saved IRQ & FIQ state
 */
static inline void arch_local_irq_restore(unsigned long flags)
{
	asm volatile(
  84:	e121f002 	msr	CPSR_c, r2

//    set_bit(BTN_0, dev->keybit); 
    dev->name = "lxlInput";   
  88:	e5943004 	ldr	r3, [r4, #4]
  8c:	e59f2094 	ldr	r2, [pc, #148]	; 128 <init_module+0x128>
  90:	e5832000 	str	r2, [r3]
    dev->id.bustype = BUS_RS232;   
  94:	e5940004 	ldr	r0, [r4, #4]
  98:	e3a03013 	mov	r3, #19
  9c:	e1c030bc 	strh	r3, [r0, #12]
    dev->id.vendor = 0x0001;   
  a0:	e3a03001 	mov	r3, #1
  a4:	e1c030be 	strh	r3, [r0, #14]
    dev->id.product = 0x0001;   
  a8:	e1c031b0 	strh	r3, [r0, #16]
    dev->id.version = 0x0100;   
  ac:	e3a03c01 	mov	r3, #256	; 0x100
  b0:	e1c031b2 	strh	r3, [r0, #18]

//    dev->dev.init_name = "lxl_input";

    dev->open = input_open;
  b4:	e59f3070 	ldr	r3, [pc, #112]	; 12c <init_module+0x12c>
  b8:	e5803174 	str	r3, [r0, #372]	; 0x174
    dev->close = input_close;
  bc:	e59f306c 	ldr	r3, [pc, #108]	; 130 <init_module+0x130>
  c0:	e5803178 	str	r3, [r0, #376]	; 0x178


    err = input_register_device(dev);   
  c4:	ebfffffe 	bl	0 <input_register_device>
    if(err)   
  c8:	e3500000 	cmp	r0, #0
  cc:	0a000001 	beq	d8 <init_module+0xd8>
    {   
        printk(KERN_ERR "failed to register input device/n");   
  d0:	e59f005c 	ldr	r0, [pc, #92]	; 134 <init_module+0x134>
  d4:	ebfffffe 	bl	0 <printk>
    }
    printk("initialized\n");
   
    init_timer(&timer);
  d8:	e59f4040 	ldr	r4, [pc, #64]	; 120 <init_module+0x120>
    err = input_register_device(dev);   
    if(err)   
    {   
        printk(KERN_ERR "failed to register input device/n");   
    }
    printk("initialized\n");
  dc:	e59f0054 	ldr	r0, [pc, #84]	; 138 <init_module+0x138>
  e0:	ebfffffe 	bl	0 <printk>
   
    init_timer(&timer);
  e4:	e3a01000 	mov	r1, #0
  e8:	e2840008 	add	r0, r4, #8
  ec:	e1a02001 	mov	r2, r1
  f0:	ebfffffe 	bl	0 <init_timer_key>
    timer.expires = jiffies + HZ;
  f4:	e59f3040 	ldr	r3, [pc, #64]	; 13c <init_module+0x13c>
    timer.function = timer_funtion;
    add_timer(&timer);
  f8:	e2840008 	add	r0, r4, #8
        printk(KERN_ERR "failed to register input device/n");   
    }
    printk("initialized\n");
   
    init_timer(&timer);
    timer.expires = jiffies + HZ;
  fc:	e5933000 	ldr	r3, [r3]
 100:	e2833064 	add	r3, r3, #100	; 0x64
 104:	e5843010 	str	r3, [r4, #16]
    timer.function = timer_funtion;
 108:	e59f3030 	ldr	r3, [pc, #48]	; 140 <init_module+0x140>
 10c:	e5843018 	str	r3, [r4, #24]
    add_timer(&timer);
 110:	ebfffffe 	bl	0 <add_timer>

     return ret;
}
 114:	e3e0000b 	mvn	r0, #11
 118:	e8bd8010 	pop	{r4, pc}
 11c:	7f008000 	.word	0x7f008000
 120:	00000000 	.word	0x00000000
 124:	00000014 	.word	0x00000014
 128:	00000040 	.word	0x00000040
	...
 134:	00000049 	.word	0x00000049
 138:	0000006e 	.word	0x0000006e
	...

Disassembly of section .exit.text:

00000000 <cleanup_module>:

  
static void __exit dev_exit(void)
{
   0:	e92d4010 	push	{r4, lr}
//   misc_deregister(&misc);
   input_unregister_device(dev);
   4:	e59f4010 	ldr	r4, [pc, #16]	; 1c <cleanup_module+0x1c>
   8:	e5940004 	ldr	r0, [r4, #4]
   c:	ebfffffe 	bl	0 <input_unregister_device>
    del_timer(&timer);
  10:	e2840008 	add	r0, r4, #8
}
  14:	e8bd4010 	pop	{r4, lr}
  
static void __exit dev_exit(void)
{
//   misc_deregister(&misc);
   input_unregister_device(dev);
    del_timer(&timer);
  18:	eafffffe 	b	0 <del_timer>
  1c:	00000000 	.word	0x00000000
